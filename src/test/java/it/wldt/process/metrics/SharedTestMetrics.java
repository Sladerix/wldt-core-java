package it.wldt.process.metrics;

import it.wldt.adapter.physical.event.PhysicalAssetEventWldtEvent;
import it.wldt.adapter.physical.event.PhysicalAssetPropertyWldtEvent;
import it.wldt.core.state.DigitalTwinState;
import it.wldt.core.state.DigitalTwinStateEventNotification;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author Marco Picone, Ph.D. - picone.m@gmail.com
 * @project wldt-core
 * @created 28/12/2023 - 20:49
 */
public class SharedTestMetrics {

    private static final Logger logger = LoggerFactory.getLogger(SharedTestMetrics.class);

    private static SharedTestMetrics instance = null;

    // Physical Property Events generated by the Physical Adapter
    private Map<String, List<PhysicalAssetPropertyWldtEvent<?>>> physicalAdapterPropertyEventMap;

    // Physical Event Notification generated by the Physical Adapter
    private Map<String, List<PhysicalAssetEventWldtEvent<?>>> physicalAdapterEventNotificationMap;

    // Physical Property Events generated by the Twin through the Shadowing Function
    private Map<String, List<PhysicalAssetPropertyWldtEvent<?>>> shadowingFunctionPropertyEventMap;

    // Physical Property Events generated by the Twin through the Shadowing Function
    private Map<String, List<PhysicalAssetEventWldtEvent<?>>> shadowingFunctionEventNotificationMap;

    // DT Digital Events Notification generated by the Twin
    private Map<String, List<DigitalTwinStateEventNotification<?>>> digitalAdapterEventNotificationMap;

    // DT Digital State Update generated by the Twin
    private Map<String, List<DigitalTwinState>> digitalAdapterStateUpdateMap;

    private SharedTestMetrics(){
        logger.info("SharedTestMetrics Constructor Called !");
        init();
    }

    public synchronized static SharedTestMetrics getInstance(){

        if(instance == null)
            instance = new SharedTestMetrics();

        return instance;
    }

    private void init(){
        logger.info("SharedTestMetrics -> Initializing ...");
        this.physicalAdapterPropertyEventMap = new HashMap<>();
        this.physicalAdapterEventNotificationMap = new HashMap<>();
        this.shadowingFunctionPropertyEventMap = new HashMap<>();
        this.shadowingFunctionEventNotificationMap = new HashMap<>();
        this.digitalAdapterEventNotificationMap = new HashMap<>();
        this.digitalAdapterStateUpdateMap = new HashMap<>();
    }

    public void registerDigitalTwin(String digitalTwinId){
        logger.info("SharedTestMetrics -> Registering DT with id: {}", digitalTwinId);
        this.physicalAdapterPropertyEventMap.put(digitalTwinId, new ArrayList<>());
        this.physicalAdapterEventNotificationMap.put(digitalTwinId, new ArrayList<>());
        this.shadowingFunctionPropertyEventMap.put(digitalTwinId, new ArrayList<>());
        this.shadowingFunctionEventNotificationMap.put(digitalTwinId, new ArrayList<>());
        this.digitalAdapterEventNotificationMap.put(digitalTwinId, new ArrayList<>());
        this.digitalAdapterStateUpdateMap.put(digitalTwinId, new ArrayList<>());
    }

    public void unRegisterDigitalTwin(String digitalTwinId){
        logger.info("SharedTestMetrics -> UnRegistering DT with id: {}", digitalTwinId);
        this.physicalAdapterPropertyEventMap.remove(digitalTwinId);
        this.physicalAdapterEventNotificationMap.remove(digitalTwinId);
        this.shadowingFunctionPropertyEventMap.remove(digitalTwinId);
        this.shadowingFunctionEventNotificationMap.remove(digitalTwinId);
        this.digitalAdapterEventNotificationMap.remove(digitalTwinId);
        this.digitalAdapterStateUpdateMap.remove(digitalTwinId);
    }

    public void resetMetrics(){

        logger.info("SharedTestMetrics -> Resetting ...");

        this.physicalAdapterPropertyEventMap.clear();
        this.physicalAdapterEventNotificationMap.clear();
        this.shadowingFunctionPropertyEventMap.clear();
        this.shadowingFunctionEventNotificationMap.clear();
        this.digitalAdapterEventNotificationMap.clear();
        this.digitalAdapterStateUpdateMap.clear();

        init();
    }

    public void addPhysicalAdapterPropertyEvent(String digitalTwinId, PhysicalAssetPropertyWldtEvent<?> event){
        this.physicalAdapterPropertyEventMap.get(digitalTwinId).add(event);
    }

    public void addPhysicalAdapterEventNotification(String digitalTwinId, PhysicalAssetEventWldtEvent<?> event){
        this.physicalAdapterEventNotificationMap.get(digitalTwinId).add(event);
    }

    public void addShadowingFunctionPropertyEvent(String digitalTwinId, PhysicalAssetPropertyWldtEvent<?> event){
        this.shadowingFunctionPropertyEventMap.get(digitalTwinId).add(event);
    }

    public void addShadowingFunctionEventNotification(String digitalTwinId, PhysicalAssetEventWldtEvent<?> event){
        this.shadowingFunctionEventNotificationMap.get(digitalTwinId).add(event);
    }

    public void addDigitalAdapterEventNotification(String digitalTwinId, DigitalTwinStateEventNotification<?> event){
        this.digitalAdapterEventNotificationMap.get(digitalTwinId).add(event);
    }

    public void addDigitalAdapterStateUpdate(String digitalTwinId, DigitalTwinState digitalTwinState){
        this.digitalAdapterStateUpdateMap.get(digitalTwinId).add(digitalTwinState);
    }

    public Map<String, List<PhysicalAssetPropertyWldtEvent<?>>> getPhysicalAdapterPropertyEventMap() {
        return physicalAdapterPropertyEventMap;
    }

    public Map<String, List<PhysicalAssetEventWldtEvent<?>>> getPhysicalAdapterEventNotificationMap() {
        return physicalAdapterEventNotificationMap;
    }

    public Map<String, List<PhysicalAssetPropertyWldtEvent<?>>> getShadowingFunctionPropertyEventMap() {
        return shadowingFunctionPropertyEventMap;
    }

    public Map<String, List<PhysicalAssetEventWldtEvent<?>>> getShadowingFunctionEventNotificationMap() {
        return shadowingFunctionEventNotificationMap;
    }

    public Map<String, List<DigitalTwinStateEventNotification<?>>> getDigitalAdapterEventNotificationMap() {
        return digitalAdapterEventNotificationMap;
    }
    
    ////////

    public List<PhysicalAssetPropertyWldtEvent<?>> getPhysicalAdapterPropertyEventList(String digitalTwinId) {
        return physicalAdapterPropertyEventMap.get(digitalTwinId);
    }

    public List<PhysicalAssetEventWldtEvent<?>> getPhysicalAdapterEventNotificationList(String digitalTwinId) {
        return physicalAdapterEventNotificationMap.get(digitalTwinId);
    }

    public List<PhysicalAssetPropertyWldtEvent<?>> getShadowingFunctionPropertyEventList(String digitalTwinId) {
        return shadowingFunctionPropertyEventMap.get(digitalTwinId);
    }

    public List<PhysicalAssetEventWldtEvent<?>> getShadowingFunctionEventNotificationList(String digitalTwinId) {
        return shadowingFunctionEventNotificationMap.get(digitalTwinId);
    }

    public List<DigitalTwinStateEventNotification<?>> getDigitalAdapterEventNotificationList(String digitalTwinId) {
        return digitalAdapterEventNotificationMap.get(digitalTwinId);
    }

    public List<DigitalTwinState> getDigitalAdapterStateUpdateList(String digitalTwinId) {
        return digitalAdapterStateUpdateMap.get(digitalTwinId);
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer("SharedTestMetrics{");
        sb.append("physicalAdapterPropertyEventMap=").append(physicalAdapterPropertyEventMap);
        sb.append(", physicalAdapterEventNotificationMap=").append(physicalAdapterEventNotificationMap);
        sb.append(", shadowingFunctionPropertyEventMap=").append(shadowingFunctionPropertyEventMap);
        sb.append(", shadowingFunctionEventNotificationMap=").append(shadowingFunctionEventNotificationMap);
        sb.append(", digitalAdapterEventNotificationMap=").append(digitalAdapterEventNotificationMap);
        sb.append(", digitalAdapterStateUpdateMap=").append(digitalAdapterStateUpdateMap);
        sb.append('}');
        return sb.toString();
    }
}
